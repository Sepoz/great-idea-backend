{"version":3,"sources":["components/Post.js","components/ComMap.js","components/CommentsRender.js","components/PostMap.js","components/PostRender.js","App.js","index.js"],"names":["Post","newPost","setNewPost","posts","setPosts","newTitle","setNewTitle","className","onSubmit","event","preventDefault","postObject","title","content","karmaTotal","comments","date","Date","toUTCString","axios","post","then","res","concat","data","catch","err","console","log","type","value","required","onChange","target","ComMap","com","useState","commentKarma","karma","setKarma","voted","setVoted","useEffect","patch","id","commentContent","onClick","window","alert","CommentsRender","map","key","PostMap","comment","setComment","newComment","setNewComment","commentObject","commentDate","PostRender","App","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bd7176a.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nconst Post = ({ newPost, setNewPost, posts, setPosts, newTitle, setNewTitle }) => {\n    \n    // create the post object\n    const addPost = (event) => {\n\t\tevent.preventDefault();\n\t\t\n        const postObject = {\n\t\t\ttitle: newTitle,\n\t\t\tcontent: newPost,\n      karmaTotal: 1,\n      comments: [],\n\t\t\tdate: new Date().toUTCString()\n\t\t}\n\t\t\n\t\taxios\n\t\t\t.post(\"/posts\", postObject)\n\t\t\t.then(res => {\n\t\t\t\tsetPosts(posts.concat(res.data));\n\t\t\t\tsetNewPost(\"\");\n\t\t\t\tsetNewTitle(\"\");\n\t\t\t})\n\t\t\t.catch(err => console.log(err))\n    };\n\n    // handle the tiping in the content input\n    const handleContentChange = (event) => {\n        setNewPost(event.target.value);\n    };\n\n    // handle the tiping in the title input\n    const handleTitleChange = (event) => {\n\t\tsetNewTitle(event.target.value);\n    };\n\n    return (\n      <div className=\"post-form\">\n        <form onSubmit={addPost}>\n          <input type=\"text\" value={newTitle} required onChange={handleTitleChange} />\n          <textarea type=\"text\" value={newPost} required onChange={handleContentChange} />\n          <button type=\"submit\">post</button>\n        </form>\n      </div>\n    );\n}\n\nexport default Post;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ComMap = ({ com, post }) => {\n    const [karma, setKarma] = useState(com.commentKarma);\n    const [voted, setVoted] = useState(false);\n\n    const handleUpvoteButton = () => {\n        if (voted === false) {\n            setKarma(karma + 1);\n            setVoted(true);\n        } else {\n            window.alert(\"You already voted!\");\n        };\n    };\n\n    const handleDownvoteButton = () => {\n        if (voted === false) {\n            setKarma(karma - 1);\n            setVoted(true);\n        } else {\n            window.alert(\"You alredy voted!\");\n        };\n    };\n\n    useEffect(() => {\n        axios\n            .patch(`/posts/${post.id}/comment/${com.id}`, {\n                commentKarma: karma\n            })  \n            .then(res => console.log(res.data))\n            .catch(err => console.log(err))\n    }, [com.id, karma, post.id]);\n\n    return (\n        <div className=\"comment\">\n            <li>{karma} {com.commentContent}</li>\n\n            <button onClick={handleUpvoteButton}>upvote</button>\n            <button onClick={handleDownvoteButton}>downvote</button>\n        </div>\n    )\n};\n\nexport default ComMap;","import React from \"react\";\nimport ComMap from \"./ComMap\";\n\nconst CommentsRender = ({ post }) => {\n    return post.comments.map(com => <ComMap key={com.id} com={com} post={post} />)\n};\n\nexport default CommentsRender;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CommentsRender from \"./CommentsRender\";\n\nconst PostMap = ({ post }) => {\n    const [karma, setKarma] = useState(post.karmaTotal);\n    const [voted, setVoted] = useState(false);\n    const [comment, setComment] = useState(post.comments);\n    const [newComment, setNewComment] = useState(\"\");\n\n    // handle upvote button\n    const handleUpvoteButton = () => {\n        if (voted === false) {\n            setKarma(karma + 1);\n            setVoted(true);\n        } else {\n            window.alert(\"You already voted!\");\n        };\n    };\n\n    // handle downvote button\n    const handleDownvoteButton = () => {\n        if (voted === false) {\n            setKarma(karma - 1);\n            setVoted(true);\n        } else {\n            window.alert(\"You alredy voted!\");\n        };\n    };\n\n    // get the comment input\n    const handleComment = (event) => {\n        setNewComment(event.target.value);\n    };\n\n    // add comment object to comment[] and backend\n    const addComment = (event) => {\n        event.preventDefault();\n\n        const commentObject = {\n            commentContent: newComment,\n            commentKarma: 1,\n            commentDate: new Date().toUTCString()\n        }\n        \n        axios\n            .post(`/posts/comment/${post.id}`, commentObject)\n            .then(res => {\n                setComment(comment.concat(res.data));\n                window.alert(\"comment added!\");\n                setNewComment(\"\");\n            })\n            .catch(err => console.log(err))\n    };\n\n    // patch request\n    useEffect(() => {\n        axios\n            .patch(`/posts/${post.id}`, {\n                karmaTotal: karma\n            })  \n            .then(res => console.log(res.data))\n            .catch(err => console.log(err))\n    }, [karma, post.id]);\n\n\n\n    return (\n        <div className=\"post\">\n            <h3>{post.title}</h3>\n            <ul>\n                <li>{karma} {post.content}</li>\n            </ul>\n            \n            <button onClick={handleUpvoteButton}>upvote</button>\n            <button onClick={handleDownvoteButton}>downvote</button>\n\n            <h3>Comments:</h3>\n            <ul>\n                <CommentsRender post={post} />\n            </ul>\n            <form onSubmit={addComment}>\n                <textarea type=\"text\" value={newComment} required onChange={handleComment} />\n                <button type=\"submit\">comment</button>\n            </form>\n        </div>\n    )\n};\n\nexport default PostMap;","import React from \"react\";\nimport PostMap from \"./PostMap\";\n\n// map every post \nconst PostRender = ({ posts }) => {\n    return posts.map(post => <PostMap key={post.id} post={post} />)\n};\n\nexport default PostRender;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Post from \"./components/Post\";\nimport PostRender from './components/PostRender';\n\nconst App = () => {\n\tconst [posts, setPosts] = useState([]);\n  \tconst [newPost, setNewPost] = useState(\"\");\n\tconst [newTitle, setNewTitle] = useState(\"\");\n\n  \tuseEffect(() => {\n\t\taxios\n\t\t\t.get(\"/posts\")\n\t\t\t.then(res => {\n\t\t\t\tsetPosts(res.data);\n\t\t\t})\n\t\t\t.catch(err => console.log(err))\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t<h1>Reddit 2</h1>\n\t\t<Post newPost={newPost} setNewPost={setNewPost} posts={posts} setPosts={setPosts} newTitle={newTitle} setNewTitle={setNewTitle} />\n\t\t<PostRender posts={posts} />\n\t\t</div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}